# ==================== COMPLETE SDLC DYNAMIC INTERRUPT WORKFLOW ====================
# File: workflow/dynamic_interrupt_workflow.py

from langgraph.graph import StateGraph, END
from langgraph.checkpoint.memory import MemorySaver
from state.sdlc_state import SDLCState

# Core workflow nodes
from nodes.requirements_node import ui_user_inputs_requirements
from nodes.user_stories_node import auto_generate_user_stories

# Product Owner Review cycle
from nodes.dynamic_review_node import (
    product_owner_review_dynamic, 
    revise_user_stories_dynamic, 
    route_after_po_review_dynamic
)

# Design phase
from nodes.design_documents_node import create_design_documents
from nodes.design_review_node import (
    design_review_dynamic,
    revise_design_documents_dynamic,
    route_after_design_review_dynamic
)

# Code generation phase
from nodes.generate_code_node import generate_code

# Code review cycle
from nodes.code_review_node import (
    code_review_dynamic,
    route_after_code_review_dynamic
)
from nodes.fix_code_after_review_node import fix_code_after_review_dynamic

# Security review cycle
from nodes.security_review_node import (
    security_review_dynamic,
    route_after_security_review_dynamic
)
from nodes.fix_code_after_security_node import fix_code_after_security_dynamic

# Test cases cycle
from nodes.test_cases_generation_node import generate_test_cases
from nodes.test_cases_review_node import (
    test_cases_review_dynamic,
    route_after_test_review_dynamic
)
from nodes.revise_test_cases_node import revise_test_cases_dynamic

# Deployment
from nodes.deployment_node import deployment

def create_dynamic_interrupt_workflow():
    """
    Create Complete SDLC workflow using DYNAMIC INTERRUPTS (Official LangGraph Pattern)
    
    Complete workflow flow:
    Requirements ‚Üí User Stories ‚Üí PO Review ‚Üí Design Documents ‚Üí Design Review ‚Üí 
    Code Generation ‚Üí Code Review ‚Üí Security Review ‚Üí Test Generation ‚Üí Test Review ‚Üí Deployment
    
    Key features:
    - Dynamic interrupts with interrupt() calls INSIDE nodes
    - Complete review cycles with iteration support
    - Comprehensive SDLC coverage from requirements to deployment
    - Human/AI/Auto review options for all review phases
    """
    
    # Initialize the graph
    workflow = StateGraph(SDLCState)
    
    # ===== ADD ALL NODES TO THE GRAPH =====
    
    # Core workflow nodes
    workflow.add_node("Input Requirements", ui_user_inputs_requirements)
    workflow.add_node("Auto Generate User Stories", auto_generate_user_stories)
    
    # Product Owner Review cycle
    workflow.add_node("Product Owner Review", product_owner_review_dynamic)
    workflow.add_node("Revise User Stories", revise_user_stories_dynamic)
    
    # Design phase
    workflow.add_node("Create Design Docs", create_design_documents)
    workflow.add_node("Design Review", design_review_dynamic)
    workflow.add_node("Revise Design Docs", revise_design_documents_dynamic)
    
    # Code generation and review cycle
    workflow.add_node("Generate Code", generate_code)
    workflow.add_node("Code Review", code_review_dynamic)
    workflow.add_node("Fix Code After Review", fix_code_after_review_dynamic)
    
    # Security review cycle
    workflow.add_node("Security Review", security_review_dynamic)
    workflow.add_node("Fix Code after Security", fix_code_after_security_dynamic)
    
    # Test cases cycle
    workflow.add_node("Generate Test Cases", generate_test_cases)
    workflow.add_node("Test Cases Review", test_cases_review_dynamic)
    workflow.add_node("Revise Test Cases", revise_test_cases_dynamic)
    
    # Deployment
    workflow.add_node("Deployment", deployment)
    
    # ===== SET ENTRY POINT =====
    workflow.set_entry_point("Input Requirements")
    
    # ===== DEFINE WORKFLOW EDGES =====
    
    # Initial flow: Requirements ‚Üí User Stories ‚Üí PO Review
    workflow.add_edge("Input Requirements", "Auto Generate User Stories")
    workflow.add_edge("Auto Generate User Stories", "Product Owner Review")
    
    # ===== PRODUCT OWNER REVIEW CYCLE =====
    workflow.add_conditional_edges(
        "Product Owner Review",
        route_after_po_review_dynamic,
        {
            "Create Design Docs": "Create Design Docs",  # Approved ‚Üí Design phase
            "Revise User Stories": "Revise User Stories"  # Needs revision
        }
    )
    # Route back to PO review after user story revision
    workflow.add_edge("Revise User Stories", "Product Owner Review")
    
    # ===== DESIGN PHASE =====
    workflow.add_edge("Create Design Docs", "Design Review")
    
    # ===== DESIGN REVIEW CYCLE =====
    workflow.add_conditional_edges(
        "Design Review",
        route_after_design_review_dynamic,
        {
            "Generate Code": "Generate Code",  # Approved ‚Üí Code generation
            "Revise Design Docs": "Revise Design Docs"  # Needs revision
        }
    )
    # Route back to design review after design revision
    workflow.add_edge("Revise Design Docs", "Design Review")
    
    # ===== CODE GENERATION AND REVIEW CYCLE =====
    workflow.add_edge("Generate Code", "Code Review")
    
    workflow.add_conditional_edges(
        "Code Review",
        route_after_code_review_dynamic,
        {
            "Security Review": "Security Review",  # Approved ‚Üí Security review
            "Fix Code After Review": "Fix Code After Review"  # Needs fixes
        }
    )
    # Route back to code review after code fixes
    workflow.add_edge("Fix Code After Review", "Code Review")
    
    # ===== SECURITY REVIEW CYCLE =====
    workflow.add_conditional_edges(
        "Security Review",
        route_after_security_review_dynamic,
        {
            "Generate Test Cases": "Generate Test Cases",  # Approved ‚Üí Test generation
            "Fix Code after Security": "Fix Code after Security"  # Needs security fixes
        }
    )
    # Route back to security review after security fixes
    workflow.add_edge("Fix Code after Security", "Security Review")
    
    # ===== TEST CASES CYCLE =====
    workflow.add_edge("Generate Test Cases", "Test Cases Review")
    
    workflow.add_conditional_edges(
        "Test Cases Review",
        route_after_test_review_dynamic,
        {
            "Deployment": "Deployment",  # Approved ‚Üí Deployment
            "Revise Test Cases": "Revise Test Cases"  # Needs test improvements
        }
    )
    # Route back to test review after test revision
    workflow.add_edge("Revise Test Cases", "Test Cases Review")
    
    # ===== DEPLOYMENT (END) =====
    workflow.add_edge("Deployment", END)
    
    # ===== COMPILE WORKFLOW =====
    compiled_workflow = workflow.compile(
        checkpointer=MemorySaver()  # Only checkpointer needed for dynamic interrupts
    )
    
    # ===== WORKFLOW INFORMATION =====
    print("üîß Complete SDLC Dynamic Interrupt Workflow Created")
    print("üéØ Uses interrupt() INSIDE nodes (official LangGraph pattern)")
    print("‚ö° Resume with Command(resume=value)")
    print("\nüÜï Complete SDLC Coverage:")
    print("   üìã Requirements Capture & Enhancement")
    print("   üìñ User Stories Generation")
    print("   üë§ Product Owner Review (with interrupts & iteration)")
    print("   üé® Design Documents Creation")
    print("   üë®‚Äçüíª Design Review (with interrupts & iteration)")
    print("   üíª Code Generation (Python)")
    print("   üîç Code Review (with interrupts & iteration)")
    print("   üîí Security Review (with interrupts & iteration)")
    print("   üß™ Test Cases Generation")
    print("   üìä Test Cases Review (with interrupts & iteration)")
    print("   üöÄ Deployment Readiness")
    print("\nüîÑ Complete Iteration Support:")
    print("   ‚Ä¢ User Stories ‚Üî Product Owner Review")
    print("   ‚Ä¢ Design Documents ‚Üî Design Review")
    print("   ‚Ä¢ Code ‚Üî Code Review")
    print("   ‚Ä¢ Code ‚Üî Security Review")
    print("   ‚Ä¢ Test Cases ‚Üî Test Cases Review")
    print("\nüõë Dynamic Interrupts for:")
    print("   ‚Ä¢ Product Owner Review (human/AI/auto)")
    print("   ‚Ä¢ Design Review (human/AI/auto)")
    print("   ‚Ä¢ Code Review (human/AI/auto)")
    print("   ‚Ä¢ Security Review (human/AI/auto)")
    print("   ‚Ä¢ Test Cases Review (human/AI/auto)")
    
    return compiled_workflow